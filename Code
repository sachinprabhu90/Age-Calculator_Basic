# Age-Calculator_Basic
from tkinter import *
from tkinter import ttk
from tkinter import messagebox

class Agecalc:

    def __init__(self, master):

        master.title('Age Calculator')
        master.configure(width=640, height=480)
        master.resizable(False, False)
        master.configure(background='white')

        

        self.frame_button = ttk.Frame(master)
        
        self.label_year =  ttk.Label(master, text = 'Year:')
        self.label_age  =  ttk.Label(master, text = 'Age:')

        self.entry_year = ttk.Entry(master, width=20)
        self.entry_age   = ttk.Entry(master, width=20)

        self.submit_button = ttk.Button(self.frame_button, text = 'Submit', command = lambda:self.callback())
        self.clear_button = ttk.Button(self.frame_button, text = 'Clear', command = lambda:self.clear())
        self.back_button = ttk.Button(self.frame_button, text = 'Backspace', command = lambda:self.back())
        
        self.label_year.pack(padx=5,pady=2)
        self.entry_year.pack(padx=5,pady=2)
        self.label_age.pack(padx=5,pady=2)
        self.entry_age.pack(padx=5,pady=2)
        self.frame_button.pack(padx=5,pady=2)

        self.submit_button.grid(row=0, column=0,padx=5,pady=5)
        self.clear_button.grid(row=0, column=1,padx=5,pady=5)
        self.back_button.grid(row=0, column=2,padx=5,pady=5)

        master.bind('<Return>', lambda e: self.key_press())
       


    #responds to Enter key. If age is already populated, invokes clear
        #else invokes callback
    def key_press(self):
        if not (self.entry_age.get()):
            self.callback()
        else:
            self.clear()
        
    def callback(self):
        i = int(0)
        try:
            i = int(self.entry_year.get())
        except ValueError:
                messagebox.showerror(title = 'Error!', message = 'Invalid Input!')
                self.clear()
                return
        if i==0 or i<0:
            messagebox.showerror(title = 'Error!', message = 'Invalid Input!')
            self.clear()
        elif i>2018:
            messagebox.showerror(title = 'Error!', message = 'Year cannot be more than 2018')
            self.clear()
            return
                
        self.entry_age.delete(0,'end')
        self.entry_age.insert(0, 'Age is {} years'.format(2018-i))
        
            
            
            

    def clear(self):
        self.entry_year.delete(0,'end')
        self.entry_age.delete(0,'end')

    def back(self):
        a=int(len(self.entry_year.get()))
        self.entry_year.delete(a-1)


def main():
    root = Tk()
    agecalc = Agecalc(root)
    root.mainloop()

if __name__== '__main__': main()
